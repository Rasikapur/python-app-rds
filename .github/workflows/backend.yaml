name: Deploy Python App to EC2 via ECR

on:
  push:
    branches:
      - main   # Trigger when pushing to main branch
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Build, tag, and push Docker image
      - name: Build, tag, and push image
        run: |
          IMAGE_TAG=latest
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

      # 5. Save SSH key for EC2
      - name: Save SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' | sed 's/\\n/\n/g' > rasi.pem
          chmod 600 rasi.pem

      - name: Deploy to EC2
        run: |
          ssh -i rasi.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            # Export AWS credentials inside EC2
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            export AWS_DEFAULT_REGION=$AWS_REGION

            # Install AWS CLI if missing
            if ! command -v aws &> /dev/null; then
              sudo apt update -y
              sudo apt install -y awscli
            fi

            # Authenticate with ECR
            aws ecr get-login-password --region $AWS_REGION \
              | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull latest image
            echo "Pulling image: $ECR_REGISTRY/$ECR_REPOSITORY:latest"
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest

            # Stop old container if running
            sudo docker rm -f my-python-app || true

            # Run new container
            sudo docker run -d --name my-python-app -p 5000:5000 \
              -e DB_HOST=$DB_HOST \
              -e DB_USER=$DB_USER \
              -e DB_PASSWORD=$DB_PASSWORD \
              -e DB_NAME=$DB_NAME \
              $ECR_REGISTRY/$ECR_REPOSITORY:latest
          EOF

        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
